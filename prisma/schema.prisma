// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  companyName   String?
  role          String?  // founder, product_manager, marketer
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  companies     Company[]
  notifications Notification[]
  notificationQueue NotificationQueue[] @relation("UserNotifications")
  
  @@map("users")
}

model Company {
  id            String   @id @default(cuid())
  name          String
  domain        String
  isCompetitor  Boolean  @default(true)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pages         MonitoredPage[]
  changes       SaasChange[]
  socialProfiles SocialProfile[]
  
  @@map("companies")
}

model MonitoredPage {
  id            String   @id @default(cuid())
  companyId     String
  url           String
  pageType      String   // pricing, features, blog, homepage, about
  isActive      Boolean  @default(true)
  checkInterval Int      @default(1440) // in minutes, default daily
  lastChecked   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  changes       SaasChange[]
  snapshots     PageSnapshot[]
  detectionRuns ChangeDetectionRun[]
  
  @@map("monitored_pages")
}

model SaasChange {
  id                    String   @id @default(cuid())
  companyId             String
  pageId                String?
  detectionRunId        String?
  changeType            String   // pricing, features, messaging, product, integration, other
  changeSummary         String   // specific, actionable summary under 80 chars
  oldValue              String?
  newValue              String?
  impactLevel           String   // high, medium, low
  confidence            String   // high, medium, low
  competitiveAnalysis   String?
  detectedAt            DateTime @default(now())
  
  company               Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  page                  MonitoredPage? @relation(fields: [pageId], references: [id], onDelete: Cascade)
  detectionRun          ChangeDetectionRun? @relation(fields: [detectionRunId], references: [id], onDelete: SetNull)
  notifications         Notification[]
  notificationQueue     NotificationQueue[]
  
  @@map("saas_changes")
}

model PageSnapshot {
  id            String   @id @default(cuid())
  pageId        String
  content       String   // HTML content of the page
  contentHash   String   // SHA256 hash for quick comparison
  textContent   String?  // Cleaned text content for LLM processing
  metadata      Json?    // Store extracted metadata (pricing, features, etc.)
  status        String   @default("active") // active, archived
  createdAt     DateTime @default(now())
  
  page          MonitoredPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([pageId, createdAt])
  @@map("page_snapshots")
}

model ChangeDetectionRun {
  id            String   @id @default(cuid())
  pageId        String?
  runType       String   // scheduled, manual, test
  status        String   // pending, running, completed, failed
  startTime     DateTime @default(now())
  endTime       DateTime?
  errorMessage  String?
  changesFound  Int      @default(0)
  metadata      Json?    // Store run configuration and results
  
  page          MonitoredPage? @relation(fields: [pageId], references: [id], onDelete: Cascade)
  changes       SaasChange[]
  
  @@map("change_detection_runs")
}

model TestScenario {
  id               String   @id @default(cuid())
  name             String
  description      String?
  pageType         String   // pricing, features, blog, homepage, about
  beforeContent    String   // Mock content representing "before" state
  afterContent     String   // Mock content representing "after" state  
  expectedChanges  Json     // Expected changes that should be detected
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("test_scenarios")
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("pending") // pending, confirmed
  createdAt DateTime @default(now())
  
  @@map("waitlist_entries")
}


model EmailTemplate {
  id                String   @id @default(cuid())
  name              String   @unique
  templateType      String   // pricing_alert, feature_alert, weekly_summary
  subject           String
  htmlContent       String
  textContent       String
  variables         Json     // Expected template variables
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  notifications     Notification[]
  notificationQueue NotificationQueue[]
  
  @@map("email_templates")
}

model NotificationQueue {
  id                String   @id @default(cuid())
  userId            String
  changeId          String?
  templateId        String
  recipientEmail    String
  subject           String
  htmlContent       String
  textContent       String
  priority          Int      @default(1) // 1=high, 2=medium, 3=low
  status            String   @default("pending") // pending, sent, failed, cancelled
  scheduledFor      DateTime @default(now())
  sentAt            DateTime?
  errorMessage      String?
  retryCount        Int      @default(0)
  maxRetries        Int      @default(3)
  metadata          Json?    // Additional context data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User         @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  change            SaasChange?  @relation(fields: [changeId], references: [id], onDelete: SetNull)
  template          EmailTemplate @relation(fields: [templateId], references: [id])
  
  @@index([status, scheduledFor])
  @@index([userId, status])
  @@map("notification_queue")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  changeId          String?
  templateId        String
  notificationType  String   // immediate_pricing, feature_announcements, weekly_summary
  status            String   @default("sent") // sent, failed
  sentAt            DateTime @default(now())
  readAt            DateTime?
  clickedAt         DateTime?
  metadata          Json?    // Email content, links, etc.
  
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  change            SaasChange?  @relation(fields: [changeId], references: [id], onDelete: SetNull)
  template          EmailTemplate @relation(fields: [templateId], references: [id])
  
  @@index([userId, sentAt])
  @@map("notifications")
}

model SocialProfile {
  id          String   @id @default(cuid())
  companyId   String
  platform    String   // instagram, twitter, facebook, tiktok, youtube, linkedin
  handle      String
  url         String?
  isActive    Boolean  @default(true)
  lastChecked DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  snapshots   SocialSnapshot[]

  @@unique([companyId, platform])
  @@map("social_profiles")
}

model SocialSnapshot {
  id         String   @id @default(cuid())
  profileId  String
  capturedAt DateTime @default(now())
  metrics    Json?
  raw        Json?
  runId      String?
  datasetId  String?
  actorId    String?
  notes      String?

  profile    SocialProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, capturedAt])
  @@map("social_snapshots")
}